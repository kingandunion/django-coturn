======
Coturn
======

Coturn is a django app to support syncing the users between a Coturn TURN/STUN/ICE server database and the django
users.

Quick start
-----------
1. add "coturn" to your INSTALLED_APPS in settings.py like this::
    INSTALLED_APPS = [
        ...
        'coturn',
    ]

2. set a "COTURN_REALM" entry in settings.py. This is a string that specifies the webrtc "realm" for your users. Right
   now coturn only supports one realm for all users, so you can't use this to segment users into groups.

3. create an empty database for the coturn users. We recommend keeping this separate from your django database.
   (NOTE: due to some oddities with Django and the schema used by Coturn, django has to be the one to create the tables
   in this database, so please don't try to create it with the coturn turnadmin command or their SQL).

4. add the connection settings for that database in settings.py as a separate database, named "coturn", like this::
   DATABASES = {
       ...
       'coturn': {
           "ENGINE": "django.db.backends.sqlite3",
           "NAME": "<path to db>"
       }
   }
   if you are running a different database for the coturn server, replace those values as needed

5. run `python3 manage.py migrate`

6. run `python3 manage.py migrate --database coturn`

7. set a "COTURN_SHARED_SECRET" in settings.py. This is the shared secret between the coturn server and the django
   server. You will need to keep this in sync with the coturn db.

8. run manage.py sync_coturn_shared_secret

9. create a new entry in signals.py in your project (or create signals.py) for user creation

10. (optional) set a "COTURN_PASSWORD_LIFETIME" entry in settings.py. This entry is the # of seconds that the
    temporary passwords generated by the method below will live. if this option is not specified, the default is
    60 seconds.

11. use the "create_TURN_API_credentials" method from coturn.views to create a new password for a given user object.

12. start coturn "turnserver" with the "-a -f" options and the db options necessary for the turnserver to connect
    to the database defined above.

if you have extended the built-in user object (usually by a OneToOne relation to the User object), and want to use a
username property off of that field rather than the User.get_username(), you will need to specify
"COTURN_USERNAME_FIELD" in settings.py also.